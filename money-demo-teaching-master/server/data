
DROP DATABASE IF EXISTS TeachingManagementSystem;
-- 1.创建数据库
CREATE DATABASE TeachingManagementSystem;
USE TeachingManagementSystem;

-- 2.1 创建学院表
CREATE TABLE Department (
    department_id VARCHAR(20) PRIMARY KEY,
    department_name VARCHAR(100) NOT NULL
);

-- 2.2 创建专业表
CREATE TABLE Major (
    major_id VARCHAR(20) PRIMARY KEY,
    major_name VARCHAR(100) NOT NULL,
    department_id VARCHAR(20),
    FOREIGN KEY (department_id) REFERENCES Department(department_id)
);

-- 2.3 创建班级表
CREATE TABLE Class (
    class_id VARCHAR(20) PRIMARY KEY,
    class_name VARCHAR(100) NOT NULL,
    major_id VARCHAR(20),
    FOREIGN KEY (major_id) REFERENCES Major(major_id)
);

-- 2.4 创建学生表
CREATE TABLE Student (
    student_id VARCHAR(20) PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    password VARCHAR(255) NOT NULL,
    gender ENUM('男', '女') NOT NULL,
    email VARCHAR(100) NOT NULL,
    address VARCHAR(200) NOT NULL,
    department_id VARCHAR(20),
    degree VARCHAR(50) NOT NULL,
    enrollment_date DATE NOT NULL,
    major_id VARCHAR(20),
    class_id VARCHAR(20),
    semester INT NOT NULL,
    total_credits DECIMAL(5,2) DEFAULT 0,
    gpa DECIMAL(4,2) DEFAULT 0,
    FOREIGN KEY (department_id) REFERENCES Department(department_id),
    FOREIGN KEY (major_id) REFERENCES Major(major_id),
    FOREIGN KEY (class_id) REFERENCES Class(class_id)
);

-- 2.5 创建教师表
CREATE TABLE Teacher (
    teacher_id VARCHAR(20) PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    password VARCHAR(255) NOT NULL,
    gender ENUM('男', '女') NOT NULL,
    email VARCHAR(100) NOT NULL,
    address VARCHAR(200) NOT NULL,
    department_id VARCHAR(20),
    title VARCHAR(50) NOT NULL,
    entry_date DATE NOT NULL,
    FOREIGN KEY (department_id) REFERENCES Department(department_id)
);

-- 2.6 创建学科表
CREATE TABLE Subject (
    subject_id VARCHAR(20) PRIMARY KEY,
    subject_name VARCHAR(100) NOT NULL,
    class_hours INT NOT NULL,
    credits DECIMAL(3,1) NOT NULL
);

-- 2.7 创建课程表
CREATE TABLE Course (
    course_id VARCHAR(20) PRIMARY KEY,
    subject_id VARCHAR(20) NOT NULL,
    teacher_id VARCHAR(20),
    semester INT NOT NULL,
    student_count INT DEFAULT 0,
    max_students INT NOT NULL,
    class_hours INT NOT NULL,
    FOREIGN KEY (subject_id) REFERENCES Subject(subject_id),
    FOREIGN KEY (teacher_id) REFERENCES Teacher(teacher_id)
);

-- 2.8 创建选课表
CREATE TABLE CourseSelection (
    student_id VARCHAR(20),
    course_id VARCHAR(20),
    selection_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (student_id, course_id),
    FOREIGN KEY (student_id) REFERENCES Student(student_id),
    FOREIGN KEY (course_id) REFERENCES Course(course_id)
);


-- 2.9 创建成绩表
CREATE TABLE Grades (
    student_id VARCHAR(20),
    course_id VARCHAR(20),
    grade DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (student_id, course_id),
    FOREIGN KEY (student_id) REFERENCES Student(student_id),
    FOREIGN KEY (course_id) REFERENCES Course(course_id)
);

-- 2.10 创建操作日志表
CREATE TABLE OperationLog (
    log_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id VARCHAR(20) NOT NULL,
    operation_type VARCHAR(10) NOT NULL,
    operation_time DATETIME DEFAULT CURRENT_TIMESTAMP,
    table_name VARCHAR(50) NOT NULL,
    record_id VARCHAR(50),
    description VARCHAR(200)
);

-- 2.11 创建备份学生表
CREATE TABLE BackupStudent LIKE Student;

-- 3.1 创建选课插入触发器（更新学生总学分）
DELIMITER $$

CREATE TRIGGER trg_CourseSelection_insert
AFTER INSERT ON CourseSelection
FOR EACH ROW
BEGIN
    DECLARE course_credits DECIMAL(3,1);
    SELECT credits INTO course_credits 
    FROM Subject 
    WHERE subject_id = (SELECT subject_id FROM Course WHERE course_id = NEW.course_id);
    UPDATE Student 
    SET total_credits = total_credits + course_credits 
    WHERE student_id = NEW.student_id;
END$$

DELIMITER ;

-- 3.2 选课删除触发器（更新学生总学分）
DELIMITER $$

CREATE TRIGGER trg_CourseSelection_delete
AFTER DELETE ON CourseSelection
FOR EACH ROW
BEGIN
    DECLARE course_credits DECIMAL(3,1);
    SELECT credits INTO course_credits 
    FROM Subject 
    WHERE subject_id = (SELECT subject_id FROM Course WHERE course_id = OLD.course_id);
    UPDATE Student 
    SET total_credits = total_credits - course_credits 
    WHERE student_id = OLD.student_id;
END$$

DELIMITER ;

-- 3.3 成绩插入触发器（更新学生GPA）
DELIMITER $$

CREATE TRIGGER trg_Grades_insert
AFTER INSERT ON Grades
FOR EACH ROW
BEGIN
    DECLARE total_grade_points DECIMAL(10,2);
    DECLARE total_credits DECIMAL(10,2);
    SELECT SUM(G.grade * S.credits), SUM(S.credits)
    INTO total_grade_points, total_credits
    FROM Grades G
    JOIN Course C ON G.course_id = C.course_id
    JOIN Subject S ON C.subject_id = S.subject_id
    WHERE G.student_id = NEW.student_id;
    IF total_credits > 0 THEN
        UPDATE Student 
        SET gpa = total_grade_points / total_credits
        WHERE student_id = NEW.student_id;
    END IF;
END$$

DELIMITER ;

-- 3.4 学生删除触发器（备份学生信息）
DELIMITER $$

CREATE TRIGGER trg_Student_delete
BEFORE DELETE ON Student
FOR EACH ROW
BEGIN
    INSERT INTO BackupStudent SELECT * FROM Student WHERE student_id = OLD.student_id;
END$$

DELIMITER ;

-- 3.5 授课更新触发器（记录教师变更）
DELIMITER $$

CREATE TRIGGER trg_Course_teacher_update
AFTER UPDATE ON Course
FOR EACH ROW
BEGIN
    IF NEW.teacher_id <> OLD.teacher_id THEN
        INSERT INTO OperationLog(user_id, operation_type, table_name, record_id, description)
        VALUES('system', 'update', 'Course', NEW.course_id, CONCAT('教师从 ', OLD.teacher_id, ' 更改为 ', NEW.teacher_id));
    END IF;
END$$

DELIMITER ;

-- 4. 创建存储过程
-- 4.1 查询某课程平均分
DELIMITER $$

CREATE PROCEDURE sp_get_course_average(IN input_course_name VARCHAR(100))
BEGIN
    DECLARE course_id_var VARCHAR(20);
    SELECT course_id INTO course_id_var 
    FROM Course 
    WHERE subject_id IN (SELECT subject_id FROM Subject WHERE subject_name = input_course_name);
    SELECT AVG(grade) AS average_grade 
    FROM Grades 
    WHERE course_id = course_id_var;
END$$

DELIMITER ;

-- 4.2 查询某学生的平均学分绩点（GPA）
DELIMITER $$

CREATE PROCEDURE sp_get_student_gpa(IN input_student_id VARCHAR(20))
BEGIN
    SELECT SUM(G.grade * S.credits) / SUM(S.credits) AS GPA
    FROM Grades G
    JOIN Course C ON G.course_id = C.course_id
    JOIN Subject S ON C.subject_id = S.subject_id
    WHERE G.student_id = input_student_id;
END$$

DELIMITER ;

-- 5. 创建视图
-- 5.1 课程信息与授课教师视图
CREATE VIEW vw_Course_Teacher AS
SELECT 
    C.course_id,
    S.subject_name,
    C.semester,
    C.class_hours,
    C.student_count,
    C.max_students,
    T.teacher_id,
    T.name AS teacher_name,
    T.title,
    T.department_id
FROM Course C
JOIN Subject S ON C.subject_id = S.subject_id
JOIN Teacher T ON C.teacher_id = T.teacher_id;

-- 5.2 学生成绩-课程信息-授课教师视图
CREATE VIEW vw_Student_Grades_Course_Teacher AS
SELECT
    G.student_id,
    Stu.name AS student_name,
    G.course_id,
    S.subject_name,
    G.grade,
    T.teacher_id,
    T.name AS teacher_name
FROM Grades G
JOIN Student Stu ON G.student_id = Stu.student_id
JOIN Course C ON G.course_id = C.course_id
JOIN Subject S ON C.subject_id = S.subject_id
JOIN Teacher T ON C.teacher_id = T.teacher_id;

-- 5.3 学生选课方案-各门科目视图
CREATE VIEW vw_Student_CourseSelection AS
SELECT
    CS.student_id,
    Stu.name AS student_name,
    CS.course_id,
    S.subject_name,
    S.credits,
    C.semester
FROM CourseSelection CS
JOIN Student Stu ON CS.student_id = Stu.student_id
JOIN Course C ON CS.course_id = C.course_id
JOIN Subject S ON C.subject_id = S.subject_id;

-- 6. 设置用户权限（安全性与完整性要求）
-- 6.1 创建用户
-- 学生用户
CREATE USER 'student_user'@'localhost' IDENTIFIED BY '123456';

-- 教师用户
CREATE USER 'teacher_user'@'localhost' IDENTIFIED BY '123456';

-- 管理员用户
CREATE USER 'admin_user'@'localhost' IDENTIFIED BY '123456';

--6.2 分配权限
-- 分配学生用户权限
GRANT SELECT ON TeachingManagementSystem.Student TO 'student_user'@'localhost';
GRANT SELECT ON TeachingManagementSystem.Course TO 'student_user'@'localhost';
GRANT SELECT, INSERT, DELETE ON TeachingManagementSystem.CourseSelection TO 'student_user'@'localhost';
GRANT SELECT ON TeachingManagementSystem.Subject TO 'student_user'@'localhost';
GRANT EXECUTE ON PROCEDURE TeachingManagementSystem.sp_get_student_gpa TO 'student_user'@'localhost';
GRANT SELECT ON TeachingManagementSystem.vw_Student_CourseSelection TO 'student_user'@'localhost';

-- 分配教师用户权限
GRANT SELECT, INSERT, UPDATE, DELETE ON TeachingManagementSystem.Student TO 'teacher_user'@'localhost';
GRANT SELECT, INSERT, UPDATE, DELETE ON TeachingManagementSystem.Course TO 'teacher_user'@'localhost';
GRANT SELECT, INSERT, UPDATE, DELETE ON TeachingManagementSystem.Grades TO 'teacher_user'@'localhost';
GRANT EXECUTE ON PROCEDURE TeachingManagementSystem.sp_get_course_average TO 'teacher_user'@'localhost';
GRANT SELECT ON TeachingManagementSystem.vw_Student_Grades_Course_Teacher TO 'teacher_user'@'localhost';

-- 分配管理员用户权限
GRANT ALL PRIVILEGES ON TeachingManagementSystem.* TO 'admin_user'@'localhost';

-- 7 插入数据
-- 学院表
INSERT INTO Department (department_id, department_name) VALUES
('D001', '计算机学院'),
('D002', '电子信息学院'),
('D003', '经济管理学院');

-- 专业表
INSERT INTO Major (major_id, major_name, department_id) VALUES
('M001', '计算机科学与技术', 'D001'),
('M002', '软件工程', 'D001'),
('M003', '电子信息工程', 'D002'),
('M004', '国际经济与贸易', 'D003');

-- 班级表
INSERT INTO Class (class_id, class_name, major_id) VALUES
('C001', '计科一班', 'M001'),
('C002', '计科二班', 'M001'),
('C003', '软件一班', 'M002'),
('C004', '电信一班', 'M003'),
('C005', '国贸一班', 'M004');

-- 学科表
INSERT INTO Subject (subject_id, subject_name, class_hours, credits) VALUES
('S001', '高等数学', 64, 4.0),
('S002', '大学英语', 48, 3.0),
('S003', '数据结构', 48, 3.0),
('S004', '电路分析', 48, 3.0),
('S005', '国际贸易', 48, 3.0);

-- 教师表
INSERT INTO Teacher (teacher_id, name, password, gender, email, address, department_id, title, entry_date) VALUES
('T001', '张伟', '123456', '男', 'zhangwei@example.com', '北京市海淀区', 'D001', '教授', '2010-09-01'),
('T002', '李娜', '123456', '女', 'lina@example.com', '上海市浦东新区', 'D001', '副教授', '2012-08-15'),
('T003', '王强', '123456', '男', 'wangqiang@example.com', '深圳市南山区', 'D002', '讲师', '2015-07-01'),
('T004', '赵敏', '123456', '女', 'zhaomin@example.com', '广州市天河区', 'D003', '教授', '2008-03-10');

-- 学生表
INSERT INTO Student (student_id, name, password, gender, email, address, department_id, degree, enrollment_date, major_id, class_id, semester) VALUES
('S2021001', '刘洋', '123456', '男', 'liuyang@example.com', '北京市朝阳区', 'D001', '本科', '2021-09-01', 'M001', 'C001', 1),
('S2021002', '王芳', '123456', '女', 'wangfang@example.com', '上海市黄浦区', 'D001', '本科', '2021-09-01', 'M001', 'C002', 1),
('S2021003', '陈杰', '123456', '男', 'chenjie@example.com', '广州市越秀区', 'D001', '本科', '2021-09-01', 'M002', 'C003', 1),
('S2021004', '赵丽', '123456', '女', 'zhaoli@example.com', '深圳市罗湖区', 'D002', '本科', '2021-09-01', 'M003', 'C004', 1),
('S2021005', '孙浩', '123456', '男', 'sunhao@example.com', '杭州市西湖区', 'D003', '本科', '2021-09-01', 'M004', 'C005', 1);

-- 课程表
INSERT INTO Course (course_id, subject_id, teacher_id, semester, student_count, max_students, class_hours) VALUES
('Crs001', 'S001', 'T001', 1, 0, 100, 64),
('Crs002', 'S002', 'T002', 1, 0, 100, 48),
('Crs003', 'S003', 'T001', 2, 0, 60, 48),
('Crs004', 'S004', 'T003', 1, 0, 60, 48),
('Crs005', 'S005', 'T004', 1, 0, 60, 48);

-- 选课表
INSERT INTO CourseSelection (student_id, course_id, status, selection_date) VALUES
('S2021001', 'Crs001', 1,'2021-09-10'),
('S2021001', 'Crs002', 1,'2021-09-11'),
('S2021002', 'Crs001', 1,'2021-09-10'),
('S2021002', 'Crs003', 1,'2021-09-12'),
('S2021003', 'Crs002', 1,'2021-09-10'),
('S2021003', 'Crs003', 1,'2021-09-12'),
('S2021004', 'Crs004', 1,'2021-09-13'),
('S2021005', 'Crs005', 1,'2021-09-14');

-- 成绩表
INSERT INTO Grades (student_id, course_id, grade) VALUES
('S2021001', 'Crs001', 85.5),
('S2021001', 'Crs002', 90.0),
('S2021002', 'Crs001', 78.0),
('S2021002', 'Crs003', 88.0),
('S2021003', 'Crs002', 92.0),
('S2021003', 'Crs003', 80.0),
('S2021004', 'Crs004', 75.0),
('S2021005', 'Crs005', 83.0);

-- 7.1 更新课程的学生人数
UPDATE Course C
SET student_count = (
    SELECT COUNT(*)
    FROM CourseSelection CS
    WHERE CS.course_id = C.course_id
);

-- 7.2 检查学生的总学分和GPA
SELECT student_id, name, total_credits, gpa FROM Student;

